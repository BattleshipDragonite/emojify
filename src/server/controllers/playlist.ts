import { Express, Request, Response, NextFunction } from 'express';
import axios from 'axios';
import path from 'path';
import fs from 'fs';
import dotenv from 'dotenv';

dotenv.config();

// fetches user ID for Spotify create playlist endpoint
export const createPlaylistURL = (req: Request, res: Response, next: NextFunction): void => {
    const data = JSON.parse(fs.readFileSync(path.join(__dirname, '../../../token.json'), 'utf8'));
    axios.get(process.env.spotifyProfileURL, { headers: { Authorization: 'Bearer ' + data.access_token } })
        .then((response) => {
            console.log('playlist id', response.data.id);
            res.locals.playlistID = response.data.id;
            res.locals.playlistURL = `https://api.spotify.com/v1/users/${response.data.id}/playlists`;
            console.log("testing playlist controller")
            console.log(res.locals.playlistURL)
            next();
        })
}

// @Christina - for this function, the front end will send us the playlist name and whether they want it to be public
// creates Spotify playlist and saves playlist ID for adding to playlist
export const createPlaylist = (req: Request, res: Response, next: NextFunction): void => {
    const playlistURL = res.locals.playlistURL;
    const tokenData = JSON.parse(fs.readFileSync(path.join(__dirname, '../../../token.json'), 'utf8'));
    const accessToken = tokenData.access_token;

    // const {name, public} = req.body;

    const data = {
        "name": "Test Playlist",
        "description": "A playlist generated by Emojify",
        "public": true
    };
    const config = {
        headers: {
            'content-type': 'Content-Type: application/json',
            'Authorization': 'Bearer ' + accessToken,
        },
    }
    axios.post(playlistURL, data, config)
        .then((response) => {
            const playlistID = response.data.id;
            res.locals.addTracksURL = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`
            next()
        }).catch((error) => {
            console.log({ error })
        })
}

// @Christina - for this one we'll receive an array of tracks from the front end
// adds tracks to playlist
export const addTracks = (req: Request, res: Response, next: NextFunction): void => {
    const addTrackURL = res.locals.addTracksURL;
    const tokenData = JSON.parse(fs.readFileSync(path.join(__dirname, '../../../token.json'), 'utf8'));
    const accessToken = tokenData.access_token;
    const tracks = {
        "uris": [
            "spotify:track:6aLl1AjRbo4ddJZh7Hzazx", "spotify:track:6TaqooOXAEcijL6G1AWS2K"
        ],
        "position": 0
    };
    const config = {
        headers: {
            'content-type': 'Content-Type: application/json',
            'Authorization': 'Bearer ' + accessToken,
        },
    }
    axios.post(addTrackURL, tracks, config)
        .then((response) => {
            const data = response.data;
            res.locals.final = data;
            next()
        }).catch((error) => {
            console.log({ error })
        })
}

// // no longer needed :(
// // fetches ID of created playlist in order to add new tracks
// export const getPlaylistID = (req: Request, res: Response, next: NextFunction): void => {
//     const data = JSON.parse(fs.readFileSync(path.join(__dirname, '../../../token.json'), 'utf8'));
//     const currentPlaylistEndpoint = process.env.currentPlaylistEndpoint;
//     axios.get(currentPlaylistEndpoint, { headers: { Authorization: 'Bearer ' + data.access_token } })
//         .then((response) => {
//             // console.log(response.data.items[0].id);
//             const playlist_id = response.data.items[0].id;
//             //I GOT IT!!!!!!!!!!!
//             res.locals.addTracksURL = `https://api.spotify.com/v1/playlists/${playlist_id}/tracks`
//         })
// }